rimeExtras:
  datadog: ${install_datadog}
  velero: ${install_velero}
  prometheusNodeExporter: ${install_prometheus_node_exporter}
  prometheusServer: ${install_prometheus_server}
  observabilityProxyServer: ${install_observability_proxy_server}
  prometheusCloudwatchExporter: ${install_prometheus_cloudwatch_exporter}
  humioFluentBit: ${install_humio_fluentbit}
  riObservabilityFluentBit: ${install_ri_observability_fluent_bit}

%{ if install_datadog ~}
datadog:
  registry: "${docker_registry}"
  datadog:
%{ if disable_datadog_metrics ~}
    prometheusScrape:
      enabled: false
%{ endif ~}
    apiKey: "${datadog_api_key}"
    tags:
      - "user:${datadog_user_tag}"
      - "rime-version:${datadog_rime_version_tag}"
  agents:
    image:
      repository: "robustintelligencehq/datadog-agent"
      pullSecrets:
        - name: ${docker_secret_name}
      tag: 7.46.0
  clusterAgent:
    image:
      repository: "robustintelligencehq/datadog-cluster-agent"
      pullSecrets:
        - name: ${docker_secret_name}
      tag: 7.46.0
%{ endif ~}

%{ if install_velero ~}
velero:
  image:
    repository: "${docker_registry}/robustintelligencehq/velero"
    tag: "v1.6.3"
    imagePullSecrets:
      - ${docker_secret_name}
  initContainers:
    - name: velero-plugin-for-aws
      image: "${docker_registry}/robustintelligencehq/velero-plugin-for-aws:v1.2.1"
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: /target
          name: plugins
  configuration:
    provider: aws
    backupStorageLocation:
      bucket: "${velero_s3_bucket_name}"
      config:
        region: "${velero_s3_region}"
        serverSideEncryption: AES256
    volumeSnapshotLocation:
      name: mongodb-snapshots
      config:
        region: "${velero_s3_region}"
  serviceAccount:
    server:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: "${velero_s3_role_arn}"
  schedules:
    mongodb-backup:
      disabled: false
      schedule: "${velero_backup_schedule}"
      useOwnerReferencesInBackup: false
      template:
        ttl: "${velero_backup_ttl}"
        includedResources:
          - pvc
          - pv
        includedNamespaces:
          - '*'
%{ endif ~}

%{ if install_prometheus_node_exporter ~}
prometheus-node-exporter:
  image:
    registry: "${docker_registry}"
    repository: "robustintelligencehq/node-exporter"
    tag: v1.6.0
    pullPolicy: IfNotPresent
%{ endif ~}

%{ if install_prometheus_server ~}
prometheus:
  server:
    global:
      external_labels:
        cluster: "${cluster_name}"
    image:
      repository: "${docker_registry}/robustintelligencehq/prometheus"
      tag: v2.48.0
      pullPolicy: IfNotPresent
    remoteWrite:
      - url: "${proxy_remote_write_url}"
  kube-state-metrics:
    image:
      registry: "${docker_registry}"
      repository: "robustintelligencehq/kube-state-metrics"
      tag: v2.10.1
      pullPolicy: IfNotPresent
  configmapReload:
    prometheus:
      enabled: true
      image:
        repository: "${docker_registry}/robustintelligencehq/prometheus-config-reloader"
        tag: v0.70.0
        pullPolicy: IfNotPresent
%{ endif ~}

%{ if install_observability_proxy_server ~}
observabilityProxyServer:
  image:
    registry: "${docker_registry}"
    name: robustintelligencehq/observability-proxy-server:v0.1
    pullPolicy: IfNotPresent
  port: ${proxy_remote_write_port}
  containerPort: ${proxy_remote_write_port}
  # The same remote_write URL is used for all Prometheus servers
  remoteWriteURL: "${api_gateway_remote_write_url}"
  remoteWriteSecretName: "${remote_write_secret_name}"
%{ endif ~}

%{ if install_prometheus_cloudwatch_exporter ~}
prometheus-cloudwatch-exporter:
  image:
    repository: "${docker_registry}/robustintelligencehq/cloudwatch-exporter"
    tag: "v0.15.5"
    pullPolicy: IfNotPresent
  config: |-
    region: "${region}"
    period_seconds: 60
    delay_seconds: 900
    metrics:

    - aws_metric_name: CPUUtilization
      aws_namespace: AWS/EC2
      aws_statistics:
      - Average
      aws_dimensions:
      - InstanceId

    # The number of unhealthy hosts
    - aws_metric_name: UnHealthyHostCount
      aws_namespace: AWS/ELB
      aws_statistics:
      - Minimum
      aws_dimensions:
      - LoadBalancerName
      - AvailabilityZone

    # The total number of bytes processed by the load balancer, including TCP/IP headers.
    # This count includes traffic to and from targets, minus health check traffic.
    - aws_metric_name: ProcessedBytes
      aws_namespace: AWS/NetworkELB
      aws_statistics:
      - Sum
      aws_dimensions:
      - LoadBalancer
      - AvailabilityZone

    # The total number of concurrent flows (or connections) from clients to targets.
    - aws_metric_name: ActiveFlowCount
      aws_namespace: AWS/NetworkELB
      aws_statistics:
      - Average
      aws_dimensions:
      - LoadBalancer
      - AvailabilityZone

    # The number of new ICMP messages rejected by the inbound rules of the load balancer security groups.
    - aws_metric_name: SecurityGroupBlockedFlowCount_Inbound_ICMP
      aws_namespace: AWS/NetworkELB
      aws_statistics:
      - Sum
      aws_dimensions:
      - LoadBalancer
      - AvailabilityZone

    # The number of new TCP messages rejected by the inbound rules of the load balancer security groups.
    - aws_metric_name: SecurityGroupBlockedFlowCount_Inbound_TCP
      aws_namespace: AWS/NetworkELB
      aws_statistics:
      - Sum
      aws_dimensions:
      - LoadBalancer
      - AvailabilityZone

    # The number of new UDP messages rejected by the inbound rules of the load balancer security groups.
    - aws_metric_name: SecurityGroupBlockedFlowCount_Inbound_UDP
      aws_namespace: AWS/NetworkELB
      aws_statistics:
      - Sum
      aws_dimensions:
      - LoadBalancer
      - AvailabilityZone

%{ endif ~}

%{ if install_humio_fluentbit ~}
humio-helm-charts:
  humio-fluentbit:
    image: "${docker_registry}/robustintelligencehq/fluent-bit:2.0.3"
    imagePullPolicy: IfNotPresent
    imagePullSecrets:
      - name: ${docker_secret_name}
    enabled: true
    humioHostname: "${humio_hostname}"
    token: "${humio_ingest_token}"
%{ endif ~}

%{ if install_ri_observability_fluent_bit ~}
fluent-bit:
  image:
    repository: "${docker_registry}/robustintelligencehq/fluent-bit"
    tag: "2.0.3"
    pullPolicy: IfNotPresent
  imagePullSecrets:
    - name: ${docker_secret_name}
%{ endif ~}
